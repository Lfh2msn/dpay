{
  "stats": {
    "suites": 2,
    "tests": 21,
    "passes": 21,
    "pending": 0,
    "failures": 0,
    "start": "2023-05-13T10:07:28.773Z",
    "end": "2023-05-13T10:07:58.761Z",
    "duration": 29988,
    "testsRegistered": 21,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "d4befcaf-3da1-42ee-92b4-4b659fe290b1",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "88e390b6-fd66-497a-9a4b-9246d63cbf56",
          "title": "DAORegistry",
          "fullFile": "/mnt/d/WP/Blockchain/Projects/dpay/test/daoRegistryTest.js",
          "file": "/test/daoRegistryTest.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"DAORegistry\"",
              "fullTitle": "DAORegistry \"before all\" hook in \"DAORegistry\"",
              "timedOut": false,
              "duration": 1020,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "aeSdk = await utils.getSdk();\n// a filesystem object must be passed to the compiler if the contract uses custom includes\nconst fileSystem = utils.getFilesystem(EXAMPLE_CONTRACT_SOURCE);\n// get content of contract\nconst sourceCode = utils.getContractContent(EXAMPLE_CONTRACT_SOURCE);\n// initialize the contract instance\ncontract = await aeSdk.initializeContract({ sourceCode, fileSystem });\nawait contract.init();\n// create a snapshot of the blockchain state\nawait utils.createSnapshot(aeSdk);",
              "err": {},
              "uuid": "98f72b24-44b7-4489-80ae-931d3243f10c",
              "parentUUID": "88e390b6-fd66-497a-9a4b-9246d63cbf56",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after each\" hook in \"DAORegistry\"",
              "fullTitle": "DAORegistry \"after each\" hook in \"DAORegistry\"",
              "timedOut": false,
              "duration": 842,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utils.rollbackSnapshot(aeSdk);",
              "err": {},
              "uuid": "cc105445-84f6-49f9-baa0-213c266a12d1",
              "parentUUID": "88e390b6-fd66-497a-9a4b-9246d63cbf56",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "DaoRegistry: create a DAO",
              "fullTitle": "DAORegistry DaoRegistry: create a DAO",
              "timedOut": false,
              "duration": 215,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await contract.create_dao(\"hello\", \"hello\", 100, true, 1, [utils.getDefaultAccounts()[1].address, utils.getDefaultAccounts()[2].address], null, {onAccount: utils.getDefaultAccounts()[1]})\nconst { decodedResult } = await contract.get_daos();\nassert.equal(decodedResult.length, 1);",
              "err": {},
              "uuid": "b5f45028-2615-41dd-9c58-11382b61e562",
              "parentUUID": "88e390b6-fd66-497a-9a4b-9246d63cbf56",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "DaoRegistry: get empty list when not set before",
              "fullTitle": "DAORegistry DaoRegistry: get empty list when not set before",
              "timedOut": false,
              "duration": 23,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const { decodedResult } = await contract.get_daos();\nassert.equal(decodedResult.length, 0);",
              "err": {},
              "uuid": "0b33ebf6-b2de-4b0c-86c5-2b0258767611",
              "parentUUID": "88e390b6-fd66-497a-9a4b-9246d63cbf56",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "DAORegistry: create two daos",
              "fullTitle": "DAORegistry DAORegistry: create two daos",
              "timedOut": false,
              "duration": 417,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// The first DAO contract\nawait contract.create_dao(\"hello\", \"hello\", 100, true, 1, [utils.getDefaultAccounts()[1].address, utils.getDefaultAccounts()[2].address], null, {onAccount: utils.getDefaultAccounts()[1]})\n// Use Chain Clone\nawait contract.create_dao(\"hello\", \"hello\", 100, true, 1, [utils.getDefaultAccounts()[1].address, utils.getDefaultAccounts()[2].address], null, {onAccount: utils.getDefaultAccounts()[2]})\nconst { decodedResult } = await contract.get_daos();\nassert.equal(decodedResult.length, 2);",
              "err": {},
              "uuid": "ede72a9f-bc6f-4b9a-8468-8f1ba3111c76",
              "parentUUID": "88e390b6-fd66-497a-9a4b-9246d63cbf56",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "DAORegistry: create sub dao",
              "fullTitle": "DAORegistry DAORegistry: create sub dao",
              "timedOut": false,
              "duration": 926,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await contract.create_dao(\"hello\", \"hello\", 100, true, 1, [utils.getDefaultAccounts()[1].address, utils.getDefaultAccounts()[2].address], null, {onAccount: utils.getDefaultAccounts()[1]})\nconst { decodedResult } = await contract.get_daos();\nawait contract.create_dao(\n  \"hello\", \n  \"hello\", \n  100, \n  true, \n  1, \n  [utils.getDefaultAccounts()[1].address, \n  utils.getDefaultAccounts()[2].address], \n  decodedResult[0][0], \n  {onAccount: utils.getDefaultAccounts()[1]}\n  )\nconst res = await contract.get_daos();\nassert.equal(res.decodedResult.length, 2);",
              "err": {},
              "uuid": "87ceba0f-4eb0-4e27-8c34-1a6d5760bca3",
              "parentUUID": "88e390b6-fd66-497a-9a4b-9246d63cbf56",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "b5f45028-2615-41dd-9c58-11382b61e562",
            "0b33ebf6-b2de-4b0c-86c5-2b0258767611",
            "ede72a9f-bc6f-4b9a-8468-8f1ba3111c76",
            "87ceba0f-4eb0-4e27-8c34-1a6d5760bca3"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1581,
          "root": false,
          "rootEmpty": false,
          "_timeout": 0
        },
        {
          "uuid": "59e8873a-aa0d-48c7-b960-4acad15f0a83",
          "title": "DAO",
          "fullFile": "/mnt/d/WP/Blockchain/Projects/dpay/test/daoTest.js",
          "file": "/test/daoTest.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"DAO\"",
              "fullTitle": "DAO \"before all\" hook in \"DAO\"",
              "timedOut": false,
              "duration": 795,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "aeSdk = await utils.getSdk();\n// a filesystem object must be passed to the compiler if the contract uses custom includes\nconst fileSystem = utils.getFilesystem(EXAMPLE_CONTRACT_SOURCE);\n// get content of contract\nconst sourceCode = utils.getContractContent(EXAMPLE_CONTRACT_SOURCE);\n// initialize the contract instance\ncontract = await aeSdk.initializeContract({ sourceCode, fileSystem });\nawait contract.init(\n  {\n    owner: utils.getDefaultAccounts()[1].address,\n    title: \"hello\",\n    description: \"hello\",\n    members: [utils.getDefaultAccounts()[1].address, utils.getDefaultAccounts()[2].address],\n    percentage: 100,\n    status: 1,\n    open: true,\n    created_date: new Date().getTime(),\n    dao_type: 1,\n    sub_daos: [],\n    proposals: [],\n    member_fund: [],\n    contributor_fund: []\n  }\n);\n// create a snapshot of the blockchain state\nawait utils.createSnapshot(aeSdk);",
              "err": {},
              "uuid": "411d1d2e-eb4f-450c-b0f6-1f0073422731",
              "parentUUID": "59e8873a-aa0d-48c7-b960-4acad15f0a83",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after each\" hook in \"DAO\"",
              "fullTitle": "DAO \"after each\" hook in \"DAO\"",
              "timedOut": false,
              "duration": 799,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utils.rollbackSnapshot(aeSdk);",
              "err": {},
              "uuid": "3e798575-50c0-40a9-962f-e0f5c62f6b52",
              "parentUUID": "59e8873a-aa0d-48c7-b960-4acad15f0a83",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "DAO: create a proposal & vote it",
              "fullTitle": "DAO DAO: create a proposal & vote it",
              "timedOut": false,
              "duration": 394,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const created_proposal = await contract.create_proposal(\"hello\", \"hello\", 1, [[utils.getDefaultAccounts()[1].address, 1], [utils.getDefaultAccounts()[2].address, 2]], 1, 1, { onAccount: utils.getDefaultAccounts()[1] })\nawait contract.vote(0, true, { onAccount: utils.getDefaultAccounts()[2] });\nconst { decodedResult } = await contract.get_proposals();\nassert.equal(decodedResult[0][1].voters.size, 1);",
              "err": {},
              "uuid": "51597c47-ef12-445a-aa1d-6918cd84f4b4",
              "parentUUID": "59e8873a-aa0d-48c7-b960-4acad15f0a83",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "DAO: create a proposal & unvote it",
              "fullTitle": "DAO DAO: create a proposal & unvote it",
              "timedOut": false,
              "duration": 1113,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const created_proposal = await contract.create_proposal(\"hello\", \"hello\", 1, [[utils.getDefaultAccounts()[1].address, 1], [utils.getDefaultAccounts()[2].address, 2]], 1, 1, { onAccount: utils.getDefaultAccounts()[1] })\nawait contract.vote(0, true, { onAccount: utils.getDefaultAccounts()[2] });\nawait contract.vote(0, false, { onAccount: utils.getDefaultAccounts()[2] });\nconst { decodedResult } = await contract.get_proposals();\nassert.equal(decodedResult[0][1].voters.get(utils.getDefaultAccounts()[2].address), false);",
              "err": {},
              "uuid": "1a46dfa4-af15-4831-a113-61872320a93f",
              "parentUUID": "59e8873a-aa0d-48c7-b960-4acad15f0a83",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "DAO: count voted members",
              "fullTitle": "DAO DAO: count voted members",
              "timedOut": false,
              "duration": 919,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const created_proposal = await contract.create_proposal(\"hello\", \"hello\", 1, [[utils.getDefaultAccounts()[1].address, 1], [utils.getDefaultAccounts()[2].address, 2]], 1, 1, { onAccount: utils.getDefaultAccounts()[1] })\nawait contract.vote(0, true, { onAccount: utils.getDefaultAccounts()[2] });\nawait contract.vote(0, true, { onAccount: utils.getDefaultAccounts()[1] });\nconst { decodedResult } = await contract.get_proposals();\nassert.equal(decodedResult[0][1].voters.size, 2);",
              "err": {},
              "uuid": "e63ba586-6911-452e-a4cd-7c7f0c518554",
              "parentUUID": "59e8873a-aa0d-48c7-b960-4acad15f0a83",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "DAO: only member can vote a proposal",
              "fullTitle": "DAO DAO: only member can vote a proposal",
              "timedOut": false,
              "duration": 214,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const created_proposal = await contract.create_proposal(\"hello\", \"hello\", 1, [[utils.getDefaultAccounts()[1].address, 1], [utils.getDefaultAccounts()[2].address, 2]], 1, 1, { onAccount: utils.getDefaultAccounts()[1] })\ntry {\n  await contract.vote(0, true, { onAccount: utils.getDefaultAccounts()[3] });\n} catch (e) {\n  assert.exists(e.message);\n}",
              "err": {},
              "uuid": "ee18cbdf-70e0-456e-ac71-4ab92978a6ce",
              "parentUUID": "59e8873a-aa0d-48c7-b960-4acad15f0a83",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "DAO: fund 1 ae ",
              "fullTitle": "DAO DAO: fund 1 ae ",
              "timedOut": false,
              "duration": 210,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const do_fund = await contract.fund({ onAccount: utils.getDefaultAccounts()[2], amount: 1 });\nconst { decodedResult } = await contract.get();\nassert.equal(decodedResult.balance, 1)",
              "err": {},
              "uuid": "af39c5d0-85e2-4cf7-8397-6d7b52c8fb2c",
              "parentUUID": "59e8873a-aa0d-48c7-b960-4acad15f0a83",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "DAO: Execute proposal when all members voted",
              "fullTitle": "DAO DAO: Execute proposal when all members voted",
              "timedOut": false,
              "duration": 1466,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await contract.fund({ onAccount: utils.getDefaultAccounts()[2], amount: 2 });\nawait contract.create_proposal(\"Pay for address 3\", \"salary\", 1, [[utils.getDefaultAccounts()[3].address, 1]], 0, 0, { onAccount: utils.getDefaultAccounts()[1] })\nawait contract.vote(0, true, { onAccount: utils.getDefaultAccounts()[1] });\nawait contract.vote(0, true, { onAccount: utils.getDefaultAccounts()[2] });\nlet { decodedResult } = await contract.execute_proposal(0);\nassert.equal(decodedResult, 1);",
              "err": {},
              "uuid": "c9b9c6d3-09ed-4d2c-959e-bfd8a66d51a1",
              "parentUUID": "59e8873a-aa0d-48c7-b960-4acad15f0a83",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "DAO: Can not execute proposal when a proposal has not votes enough",
              "fullTitle": "DAO DAO: Can not execute proposal when a proposal has not votes enough",
              "timedOut": false,
              "duration": 1178,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await contract.fund({ onAccount: utils.getDefaultAccounts()[2], amount: 2 });\nawait contract.create_proposal(\"Pay for address 3\", \"salary\", 1, [[utils.getDefaultAccounts()[3].address, 1]], 0, 0, { onAccount: utils.getDefaultAccounts()[1] })\nawait contract.vote(0, true, { onAccount: utils.getDefaultAccounts()[1] });\ntry {\n  let { decodedResult } = await contract.execute_proposal(0);\n} catch (e) {\n  assert.exists(e.message);\n}",
              "err": {},
              "uuid": "d378b896-3989-4cc3-817e-956d9eda10a1",
              "parentUUID": "59e8873a-aa0d-48c7-b960-4acad15f0a83",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "DAO: execute proposal with timelock",
              "fullTitle": "DAO DAO: execute proposal with timelock",
              "timedOut": false,
              "duration": 1360,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await contract.fund({ onAccount: utils.getDefaultAccounts()[2], amount: 2 });\nawait contract.create_proposal(\"Pay for address 3\", \"salary\", 2, [[utils.getDefaultAccounts()[3].address, 1]], new Date().getTime() + 200, 0, { onAccount: utils.getDefaultAccounts()[1] })\nawait contract.vote(0, true, { onAccount: utils.getDefaultAccounts()[1] });\nawait contract.vote(0, true, { onAccount: utils.getDefaultAccounts()[2] });\nlet { decodedResult } = await contract.execute_proposal(0);\nassert.equal(decodedResult, 1)",
              "err": {},
              "uuid": "1cd1dd39-61a3-4384-a6c8-45ad468c9b5d",
              "parentUUID": "59e8873a-aa0d-48c7-b960-4acad15f0a83",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "DAO: add member",
              "fullTitle": "DAO DAO: add member",
              "timedOut": false,
              "duration": 196,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await contract.add_member(utils.getDefaultAccounts()[3].address, { onAccount: utils.getDefaultAccounts()[1] });\nlet { decodedResult } = await contract.get_members();\nassert.equal(decodedResult.length, 3)",
              "err": {},
              "uuid": "86cc55c5-9449-4396-8584-9fa824c11c54",
              "parentUUID": "59e8873a-aa0d-48c7-b960-4acad15f0a83",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "DAO: only owner can add member",
              "fullTitle": "DAO DAO: only owner can add member",
              "timedOut": false,
              "duration": 15,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "try {\n  await contract.add_member(utils.getDefaultAccounts()[3].address, { onAccount: utils.getDefaultAccounts()[2] });\n} catch (e) {\n  assert.exists(e.message)\n}",
              "err": {},
              "uuid": "3df9a034-85e8-43bc-8ba7-0efef20c11f9",
              "parentUUID": "59e8873a-aa0d-48c7-b960-4acad15f0a83",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "DAO: remove member",
              "fullTitle": "DAO DAO: remove member",
              "timedOut": false,
              "duration": 213,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await contract.remove_member(utils.getDefaultAccounts()[2].address, { onAccount: utils.getDefaultAccounts()[1] });\nlet { decodedResult } = await contract.get_members();\nassert.equal(decodedResult.length, 1)",
              "err": {},
              "uuid": "627544e5-1fff-4be2-9a86-2ca5739e0b38",
              "parentUUID": "59e8873a-aa0d-48c7-b960-4acad15f0a83",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "DAO: only owner can remove member",
              "fullTitle": "DAO DAO: only owner can remove member",
              "timedOut": false,
              "duration": 16,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "try {\n  await contract.remove_member(utils.getDefaultAccounts()[2].address, { onAccount: utils.getDefaultAccounts()[2] });\n} catch (e) {\n  assert.exists(e.message)\n}",
              "err": {},
              "uuid": "0a3bb2f5-1b4b-44cd-81c6-969c8fcc9fe8",
              "parentUUID": "59e8873a-aa0d-48c7-b960-4acad15f0a83",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "DAO: leave dao",
              "fullTitle": "DAO DAO: leave dao",
              "timedOut": false,
              "duration": 214,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await contract.leave({ onAccount: utils.getDefaultAccounts()[2] });\nlet { decodedResult } = await contract.get_members();\nassert.equal(decodedResult.length, 1)",
              "err": {},
              "uuid": "ec4758ca-b7aa-498a-8db3-f834edc065d9",
              "parentUUID": "59e8873a-aa0d-48c7-b960-4acad15f0a83",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "DAO: change dao status",
              "fullTitle": "DAO DAO: change dao status",
              "timedOut": false,
              "duration": 215,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await contract.change_dao_status(2, { onAccount: utils.getDefaultAccounts()[1] });\nlet { decodedResult } = await contract.get()\nassert.equal(decodedResult.status, 2)",
              "err": {},
              "uuid": "75f88755-4546-4912-9846-b846a0568a09",
              "parentUUID": "59e8873a-aa0d-48c7-b960-4acad15f0a83",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "DAO: could not change dao status if dao status is 3",
              "fullTitle": "DAO DAO: could not change dao status if dao status is 3",
              "timedOut": false,
              "duration": 231,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await contract.change_dao_status(3, { onAccount: utils.getDefaultAccounts()[1] });\nlet result = true;\ntry {\n  await contract.change_dao_status(2, { onAccount: utils.getDefaultAccounts()[1] });\n} catch (e) {\n  result = false\n}\nlet { decodedResult } = await contract.get()\nassert.equal(result, false)",
              "err": {},
              "uuid": "df8b75f8-afee-4add-9a14-4747861e93e9",
              "parentUUID": "59e8873a-aa0d-48c7-b960-4acad15f0a83",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "DAO: change proposal status",
              "fullTitle": "DAO DAO: change proposal status",
              "timedOut": false,
              "duration": 1075,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await contract.fund({ onAccount: utils.getDefaultAccounts()[2], amount: 2 });\nawait contract.create_proposal(\"Pay for address 3\", \"salary\", 1, [[utils.getDefaultAccounts()[3].address, 1]], 0, 0, { onAccount: utils.getDefaultAccounts()[1] })\nawait contract.change_proposal_status(0, 2, { onAccount: utils.getDefaultAccounts()[1] })\nlet { decodedResult } = await contract.get_proposals();\n\nassert.equal(decodedResult[0][1].status, 2)",
              "err": {},
              "uuid": "cfab655d-8999-4322-bf73-c31099075886",
              "parentUUID": "59e8873a-aa0d-48c7-b960-4acad15f0a83",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "DAO: could not do something if DAO status is not active",
              "fullTitle": "DAO DAO: could not do something if DAO status is not active",
              "timedOut": false,
              "duration": 198,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await contract.change_dao_status(2, { onAccount: utils.getDefaultAccounts()[1] });\ntry {\n  await contract.create_proposal(\"hello\", \"hello\", 1, [[utils.getDefaultAccounts()[1].address, 1], [utils.getDefaultAccounts()[2].address, 2]], 1, 1, { onAccount: utils.getDefaultAccounts()[1] })\n} catch(e) {\n  assert.exists(e.message)\n}",
              "err": {},
              "uuid": "8f241df6-0399-486f-87ac-232899a1bcb7",
              "parentUUID": "59e8873a-aa0d-48c7-b960-4acad15f0a83",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "51597c47-ef12-445a-aa1d-6918cd84f4b4",
            "1a46dfa4-af15-4831-a113-61872320a93f",
            "e63ba586-6911-452e-a4cd-7c7f0c518554",
            "ee18cbdf-70e0-456e-ac71-4ab92978a6ce",
            "af39c5d0-85e2-4cf7-8397-6d7b52c8fb2c",
            "c9b9c6d3-09ed-4d2c-959e-bfd8a66d51a1",
            "d378b896-3989-4cc3-817e-956d9eda10a1",
            "1cd1dd39-61a3-4384-a6c8-45ad468c9b5d",
            "86cc55c5-9449-4396-8584-9fa824c11c54",
            "3df9a034-85e8-43bc-8ba7-0efef20c11f9",
            "627544e5-1fff-4be2-9a86-2ca5739e0b38",
            "0a3bb2f5-1b4b-44cd-81c6-969c8fcc9fe8",
            "ec4758ca-b7aa-498a-8db3-f834edc065d9",
            "75f88755-4546-4912-9846-b846a0568a09",
            "df8b75f8-afee-4add-9a14-4747861e93e9",
            "cfab655d-8999-4322-bf73-c31099075886",
            "8f241df6-0399-486f-87ac-232899a1bcb7"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 9227,
          "root": false,
          "rootEmpty": false,
          "_timeout": 0
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 0
    }
  ],
  "meta": {
    "mocha": {
      "version": "9.2.2"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "dpay",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": {
        "reportDir": "public/test-report",
        "reportFilename": "dpay"
      },
      "version": "6.2.0"
    }
  }
}